<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--<bean id = "alien" class = "org.example.Alien">-->
<!--</bean>-->
<!--    by default the scope of the beans are singleton i.e only one object is created -->
<!--    but if we want that every time a new object to be created we use scope = "prototype"-->

<!--    <bean id = "alien" class = "org.example.Alien"  scope="prototype">-->
<!--    </bean>-->

<!--    Calling of setters automatically and giving value through the property tag-->
<!--    SETTER INJECCTION primitive datatype-->

<!--    <bean id = "alien" class = "org.example.Alien">-->
<!--        <property name="age" value="12"></property>-->
<!--    </bean>-->


<!--    if i want to use reference of an object of another class, i can do this way:-->

<!--    SETTER INJECTION OF A OBJECT FROM ANOTHER CLASS:  this will refer to the object that created by bean tag below and name is laptop -->

<!--    <bean id = "alien" class = "org.example.Alien">-->
<!--        <property name="age" value="12"></property>-->
<!--        <property name="lap" ref="laptop"></property>-->
<!--    </bean>-->

<!--    <bean id = "laptop" class = "org.example.Laptop" scope="singleton">-->
<!--    </bean>-->


<!--    CONSTRUCTOR INJECTION: CONSTRUCTOR-ARG -->
<!--    <bean id = "alien" class = "org.example.Alien">-->
<!--            <constructor-arg value="32"></constructor-arg>-->
<!--        <constructor-arg ref="laptop"></constructor-arg>-->

<!--        OR-->

<!--        <constructor-arg type="org.example.Laptop" ref="laptop"></constructor-arg>-->
<!--        <constructor-arg type="int" value="31"></constructor-arg>-->

        <!--        OR-->
<!-- Also we can use name tag to recognize the parameters then an annotation is used @ConstructorProperties({age,lap}))-->
<!--        <constructor-arg index="1" ref="laptop"></constructor-arg>-->
<!--        <constructor-arg index="0" value="31"></constructor-arg>-->

<!--             <property name="lap" ref="laptop"></property>-->
<!--        </bean>-->


<!--    AUTOWIRING-->

<!--    <bean id="alien" class="org.example.Alien" autowire="byName">-->

<!--    if we are using byType autowiring it will search by its type matching to computer-->
<!--    in case, there are both laptop and desktop togther spring is confused and throw error. so there is a thing called primary bean-->

<!--    <bean id="alien" class="org.example.Alien" autowire="byType">-->
<!--        <property name="age" value="23"></property>-->

<!--        <property name="computer" ref="computer"></property>-->
<!--    </bean>-->



<!--        <bean id = "computer" class = "org.example.Laptop" primary="true">-->
<!--        </bean>-->
<!--    <bean id="desktop" class="org.example.Desktop"></bean>-->



<!--    LAZY INIT: MEANS THAT WHENEVER IT IS REQUIRED ONLY THEN THE OBJECT OF THAT BEAN IS CREATED, IN CASE NON LAZY DEPENDS ON LAZY THEN THE OBJECT GOR CREATED: -->

<!--            <bean id = "computer" class = "org.example.Laptop" primary="true">-->
<!--            </bean>-->
<!--        <bean id="desktop" class="org.example.Desktop" lazy-init="true"></bean>-->

    <bean id="alien" class="org.example.Alien" autowire="byType">
        <property name="age" value="23"></property>

        <property name="computer">
            <bean id = "computer" class = "org.example.Laptop" primary="true">
            </bean>
        </property>

    </bean>

</beans>